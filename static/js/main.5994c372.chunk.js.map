{"version":3,"sources":["utils/FloodFill.tsx","assets/bomb.svg","assets/red-flag.svg","assets/timer.svg","components/board/showMines.tsx","utils/ShuffleBoard.tsx","utils/NeighbourCount.tsx","components/board/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["floodfill","x","y","openStatus","width","height","neighbourMineCount","index","i","j","ShowMines","prop","data","minesCount","React","useState","markStatus","setMarkStatus","setOpenStatus","setNeighbourMineCount","mines","setMines","gameOver","setGameOver","selectedMineCount","setselectedMineCount","seconds","setSeconds","isRunning","setIsRunning","touchTimeoutRef","useRef","useEffect","interval","setInterval","prevSeconds","clearInterval","handleClickLeft","newOpenStatus","slice","handleClickRight","newmarkStatus","newselectedMineCount","total","Array","fill","start","length","randomIndex","Math","floor","random","tmp","shuffle","result","newX","k","newY","calcNeighbourCount","every","isMine","minesArray","row","icon","className","id","style","color","src","red_flag","alt","bomb","push","onClick","onContextMenu","onTouchStart","current","setTimeout","handleTouchStart","onTouchEnd","clearTimeout","e","preventDefault","map","timer","value","Board","props","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5994c372.chunk.js","sourcesContent":["export function floodfill(\n    x:number,\n    y:number,\n    openStatus:Array<number>,\n    width:number,\n    height:number,\n    neighbourMineCount:Array<number>\n):void{\n    if (x < 0 || y < 0 || x === height || y === width) {\n        return;\n    }\n    const index = x * width + y;\n    if (openStatus[index] === 1) {\n        return;\n    }\n    openStatus[index] = 1;\n    if (neighbourMineCount[index] > 0) {\n        return;\n    }\n    for (let i = -1; i < 2; i++) {\n        for (let j = -1; j < 2; j++) {\n            floodfill(x + i, y + j,openStatus,width,height,neighbourMineCount);\n        }\n    }\n}","export default __webpack_public_path__ + \"static/media/bomb.cffe0f47.svg\";","export default __webpack_public_path__ + \"static/media/red-flag.083d31fd.svg\";","export default __webpack_public_path__ + \"static/media/timer.7471cc35.svg\";","import React, { useRef } from \"react\";\nimport { shuffle } from \"../../utils/ShuffleBoard\";\nimport { calcNeighbourCount } from \"../../utils/NeighbourCount\";\nimport { floodfill } from \"../../utils/FloodFill\";\nimport bomb from \"../../assets/bomb.svg\";\nimport red_flag from \"../../assets/red-flag.svg\";\nimport timer from \"../../assets/timer.svg\";\n// import grass from \"../../assets/grass.svg\";\n\n\ntype Props = {\n  data: {\n    height: number;\n    width: number;\n    minesCount: number;\n  };\n};\n\nconst ShowMines = (prop: Props) => {\n  const { height, width, minesCount } = prop.data;\n\n  const [markStatus, setMarkStatus] = React.useState<Array<number>>([]);\n  const [openStatus, setOpenStatus] = React.useState<Array<number>>([]);\n  const [neighbourMineCount, setNeighbourMineCount] = React.useState<\n    Array<number>\n  >([]);\n  const [mines, setMines] = React.useState<Array<number>>([]);\n  const [gameOver, setGameOver] = React.useState<boolean>(false);\n  const [selectedMineCount, setselectedMineCount] = React.useState<number>(0);\n  const [seconds, setSeconds] = React.useState(0);\n  const [isRunning, setIsRunning] = React.useState(false);\n\n  const touchTimeoutRef = useRef<any>();\n\n  React.useEffect(() => {\n    let interval: any = null;\n\n    if (isRunning) {\n      interval = setInterval(() => {\n        setSeconds((prevSeconds) => prevSeconds + 1);\n      }, 1000);\n    }\n    return () => clearInterval(interval);\n  }, [isRunning]);\n\n  const handleClickLeft = (x: number, y: number): void => {\n    setIsRunning(true);\n    if (gameOver) {\n      setIsRunning(false);\n      return;\n    }\n    const index = x * width + y;\n    if (openStatus[index] === 1 || markStatus[index] === 1) {\n      return;\n    }\n    if (mines[index]) {\n      const newOpenStatus = openStatus.slice(0);\n      newOpenStatus[index] = 1;\n      setOpenStatus(newOpenStatus);\n      setGameOver(true);\n      setIsRunning(false);\n      return;\n    }\n\n    if (neighbourMineCount[index] > 0) {\n      const newOpenStatus = openStatus.slice(0);\n      newOpenStatus[index] = 1;\n      setOpenStatus(newOpenStatus);\n      return;\n    }\n\n    const newOpenStatus = openStatus.slice(0);\n    floodfill(x, y, newOpenStatus, width, height, neighbourMineCount);\n    setOpenStatus(newOpenStatus);\n  };\n\n  const handleClickRight = (x: number, y: number) => {\n    if (gameOver) {\n      return;\n    }\n    const index = x * width + y;\n    if (openStatus[index] === 1) {\n      return;\n    }\n    const newmarkStatus = markStatus.slice(0);\n    newmarkStatus[index] = (newmarkStatus[index] + 1) % 2;\n    let newselectedMineCount = selectedMineCount;\n    if (newmarkStatus[index]) {\n      newselectedMineCount++;\n    } else {\n      newselectedMineCount--;\n    }\n    setMarkStatus(newmarkStatus);\n    setselectedMineCount(newselectedMineCount);\n  };\n\n  React.useEffect(() => {\n    const total = width * height;\n    const mines = new Array(total).fill(0);\n    for (let i = 0; i < minesCount; i++) {\n      mines[i] = 1;\n    }\n    shuffle<number>(mines, minesCount);\n    const neighbourMineCount = calcNeighbourCount(width, height, mines);\n    setOpenStatus(new Array(total).fill(0));\n    setMarkStatus(new Array(total).fill(0));\n    setNeighbourMineCount(neighbourMineCount);\n    setMines(mines);\n    setGameOver(false);\n    setselectedMineCount(0);\n  }, [height, width, minesCount]);\n\n  React.useEffect(() => {\n    if (selectedMineCount === minesCount) {\n      const match = mines.every((isMine, index) => {\n        if (\n          (isMine && markStatus[index] === 1) ||\n          (!isMine && markStatus[index] !== 1)\n        ) {\n          return true;\n        }\n        return false;\n      });\n      if (match) {\n        setGameOver(true);\n        setIsRunning(false);\n      }\n    }\n  }, [selectedMineCount]);\n\n  const minesArray = [];\n  for (let i = 0; i < height; i++) {\n    const row = [];\n    for (let j = 0; j < width; j++) {\n      const index = i * width + j;\n      let icon = null;\n      if (markStatus[index] === 1) {\n        icon = (\n          <span className=\"each-cell\" id=\"mark-1\" style={{ color: \"red\" }}>\n            <img src={red_flag} alt=\"red flag\" />\n          </span>\n        );\n      } else if (openStatus[index] === 1) {\n        if (mines[index]) {\n          icon = (\n            <span className=\"each-cell\" id=\"mine-1\">\n              <img src={bomb} alt=\"bomb\" />\n            </span>\n          );\n        } else if (neighbourMineCount[index] > 0) {\n          icon = <span id=\"no-mine-1\">{neighbourMineCount[index]}</span>;\n        }\n      }\n\n      const handleTouchStart = (i: number, j: number) => {\n        touchTimeoutRef.current = setTimeout(() => {\n          handleClickRight(i, j);\n        }, 500);\n      };\n\n      const handleTouchEnd = () => {\n        clearTimeout(touchTimeoutRef.current);\n      };\n\n      row.push(\n        <div\n          className={`mine-sweeper-item ${openStatus[index] ? \"is-open\" : \"\"}`}\n          key={j}\n          onClick={() => handleClickLeft(i, j)}\n          onContextMenu={() => handleClickRight(i, j)}\n          onTouchStart={() => handleTouchStart(i, j)}\n          onTouchEnd={handleTouchEnd}\n        >\n          {icon}\n        </div>\n      );\n    }\n    minesArray.push(\n      <div className=\"mine-sweeper-row\" key={i}>\n        {row}\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <div\n        className=\"mine-sweeper-container\"\n        onContextMenu={(e: React.MouseEvent) => e.preventDefault()}\n      >\n        {minesArray.map((e) => {\n          return e;\n        })}\n        <div className=\"panel-container\">\n          <div className=\"panel-data-container\">\n            <div className=\"flags-number-container\">\n              <img src={red_flag} alt=\"red flag\" height={24} />{\" \"}\n              {selectedMineCount}\n            </div>\n            <div className=\"flags-number-container\">\n              <img src={timer} alt=\"timer\" height={24} /> {seconds}\n            </div>\n            <div className=\"flags-number-container\">\n              <img src={bomb} alt=\"red flag\" height={24} /> {minesCount}\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"result-container\">\n        {gameOver ? (\n          markStatus.length === mines.length &&\n          markStatus.every((value, index) => value === mines[index]) ? (\n            <div>🥳 You won</div>\n          ) : (\n            <div> 🥲 You lost</div>\n          )\n        ) : null}\n      </div>\n    </>\n  );\n};\n\nexport default ShowMines;\n","\nexport function shuffle<T>(mines:Array<T>,start:number):void {\n    for (let i = 1; i < mines.length; i++) {\n        const randomIndex = Math.floor(Math.random() * (i + 1));\n        const tmp = mines[randomIndex];\n        mines[randomIndex] = mines[i];\n        mines[i] = tmp;\n    }\n}","export function calcNeighbourCount(width:number,height:number,mines:Array<number>):Array<number>{\n    const result = new Array(mines.length).fill(0);\n    for (let i = 0; i < result.length; i++) {\n        if (!mines[i]) {\n            continue;\n        }\n        const y = i % width;\n        const x = (i - y) / width;\n        for (let j = -1; j < 2; j++) {\n            const newX = x + j;\n            if (newX < 0 || newX === height) {\n                continue;\n            }\n            for (let k = -1; k < 2; k++) {\n                const newY = y + k;\n                if (newY < 0 || newY ===width) {\n                    continue;\n                }\n                result[newX * width + newY]++;\n            }\n        }\n    }\n    return result;\n}\n","import './index.css';\nimport ShowMines from './showMines'\n\ntype Props = {\n    height: number,\n    width: number,\n    minesCount: number\n}\n\nconst Board = (props: Props) => {\n    return (\n        <div className=\"board-container\">\n            <ShowMines data={props} />\n        </div>\n    )\n}\n\nexport default Board;","import './App.css';\nimport  Board from './components/board/index' \n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <div className=\"app-main\">\n        <Board height={8} width={8} minesCount={10}/>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}