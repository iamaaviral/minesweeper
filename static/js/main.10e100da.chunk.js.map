{"version":3,"sources":["utils/FloodFill.tsx","assets/bomb.svg","assets/red-flag.svg","components/board/showMines.tsx","utils/ShuffleBoard.tsx","utils/NeighbourCount.tsx","components/board/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["floodfill","x","y","openStatus","width","height","neighbourMineCount","index","i","j","ShowMines","prop","data","minesCount","React","useState","markStatus","setMarkStatus","setOpenStatus","setNeighbourMineCount","mines","setMines","gameOver","setGameOver","selectedMineCount","setselectedMineCount","handleClickLeft","useRef","e","preventDefault","newOpenStatus","slice","handleClickRight","newmarkStatus","newselectedMineCount","useEffect","total","Array","fill","start","length","randomIndex","Math","floor","random","tmp","shuffle","result","newX","k","newY","calcNeighbourCount","every","isMine","minesArray","row","icon","className","id","style","color","src","red_flag","alt","bomb","push","onClick","onContextMenu","onDoubleClick","map","value","Board","props","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.10e100da.chunk.js","sourcesContent":["export function floodfill(\n    x:number,\n    y:number,\n    openStatus:Array<number>,\n    width:number,\n    height:number,\n    neighbourMineCount:Array<number>\n):void{\n    if (x < 0 || y < 0 || x === height || y === width) {\n        return;\n    }\n    const index = x * width + y;\n    if (openStatus[index] === 1) {\n        return;\n    }\n    openStatus[index] = 1;\n    if (neighbourMineCount[index] > 0) {\n        return;\n    }\n    for (let i = -1; i < 2; i++) {\n        for (let j = -1; j < 2; j++) {\n            floodfill(x + i, y + j,openStatus,width,height,neighbourMineCount);\n        }\n    }\n}","export default __webpack_public_path__ + \"static/media/bomb.cffe0f47.svg\";","export default __webpack_public_path__ + \"static/media/red-flag.083d31fd.svg\";","import React, { useRef } from 'react'\nimport { shuffle } from '../../utils/ShuffleBoard'\nimport { calcNeighbourCount } from '../../utils/NeighbourCount'\nimport { floodfill } from '../../utils/FloodFill'\nimport bomb from '../../assets/bomb.svg'\nimport red_flag from '../../assets/red-flag.svg'\n\ntype Props = {\n    data: {\n        height: number,\n        width: number,\n        minesCount: number\n    }\n}\n\nconst ShowMines = (prop: Props) => {\n    const { height, width, minesCount } = prop.data;\n\n    const [markStatus, setMarkStatus] = React.useState<Array<number>>([])\n    const [openStatus, setOpenStatus] = React.useState<Array<number>>([])\n    const [neighbourMineCount, setNeighbourMineCount] = React.useState<Array<number>>([])\n    const [mines, setMines] = React.useState<Array<number>>([])\n    const [gameOver, setGameOver] = React.useState<boolean>(false)\n    const [selectedMineCount, setselectedMineCount] = React.useState<number>(0)\n    const [_, setContextMenuVisible] = React.useState<boolean>(false);\n    const longPressTimer = useRef<any>();\n\n    const handleClickLeft = (e: any, x: number, y: number): void => {\n        e.preventDefault()\n        if (gameOver) {\n            return;\n        }\n        const index = x * width + y;\n        if (openStatus[index] === 1 || markStatus[index] === 1) {\n            return;\n        }\n        if (mines[index]) {\n            const newOpenStatus = openStatus.slice(0);\n            newOpenStatus[index] = 1;\n            setOpenStatus(newOpenStatus)\n            setGameOver(true)\n            return;\n        }\n\n        if (neighbourMineCount[index] > 0) {\n            const newOpenStatus = openStatus.slice(0);\n            newOpenStatus[index] = 1;\n            setOpenStatus(newOpenStatus)\n            return;\n        }\n\n        const newOpenStatus = openStatus.slice(0);\n        floodfill(x, y, newOpenStatus, width, height, neighbourMineCount);\n        setOpenStatus(newOpenStatus)\n    }\n\n    const handleClickRight = (e: any, x: number, y: number) => {\n        e.preventDefault();\n        if (gameOver) {\n            return;\n        }\n        const index = x * width + y;\n        if (openStatus[index] === 1) {\n            return;\n        }\n        const newmarkStatus = markStatus.slice(0);\n        newmarkStatus[index] = (newmarkStatus[index] + 1) % 2;\n        let newselectedMineCount = selectedMineCount;\n        if (newmarkStatus[index]) {\n            newselectedMineCount++;\n        } else {\n            newselectedMineCount--;\n        }\n        setMarkStatus(newmarkStatus);\n        setselectedMineCount(newselectedMineCount)\n    }\n\n    React.useEffect(() => {\n        const total = width * height;\n        const mines = new Array(total).fill(0);\n        for (let i = 0; i < minesCount; i++) {\n            mines[i] = 1;\n        }\n        shuffle<number>(mines, minesCount);\n        const neighbourMineCount = calcNeighbourCount(width, height, mines);\n        setOpenStatus(new Array(total).fill(0))\n        setMarkStatus(new Array(total).fill(0))\n        setNeighbourMineCount(neighbourMineCount)\n        setMines(mines)\n        setGameOver(false)\n        setselectedMineCount(0)\n    }, [height, width, minesCount])\n\n    React.useEffect(() => {\n        if (selectedMineCount === minesCount) {\n            const match = mines.every((isMine, index) => {\n                if ((isMine && markStatus[index] === 1) || (!isMine && markStatus[index] !== 1)) {\n                    return true;\n                }\n                return false;\n            });\n            if (match) {\n                setGameOver(true)\n            }\n        }\n    }, [selectedMineCount])\n\n    const minesArray = [];\n    for (let i = 0; i < height; i++) {\n        const row = [];\n        for (let j = 0; j < width; j++) {\n            const index = i * width + j;\n            let icon = null;\n            if (markStatus[index] === 1) {\n\n                icon = (\n                    <span className=\"each-cell\" id=\"mark-1\" style={{ color: 'red' }}><img src={red_flag} alt=\"red flag\"/></span>\n                );\n            }\n            else if (openStatus[index] === 1) {\n\n                if (mines[index]) {\n                    icon = (\n                        <span className=\"each-cell\" id=\"mine-1\"><img src={bomb} alt='bomb'/></span>\n                    );\n                } else if (neighbourMineCount[index] > 0) {\n                    icon = (\n                        <span id=\"no-mine-1\">\n                            {neighbourMineCount[index]}\n                        </span>\n                    );\n                }\n            }\n\n            row.push(\n                <button\n                    className={`mine-sweeper-item ${openStatus[index] ? 'is-open' : ''}`}\n                    key={j}\n                    onClick={(e) => handleClickLeft(e, i, j)}\n                    onContextMenu={(e) => handleClickRight(e,i, j)}\n                    onDoubleClick={(e) => handleClickRight(e, i, j)}\n                >\n                    {icon}\n                </button>\n            );\n        }\n        minesArray.push(\n            <div className=\"mine-sweeper-row\" key={i}>\n                {row}\n            </div>\n        );\n    }\n\n\n    return (\n        <div\n            className=\"mine-sweeper-container\"\n            onContextMenu={(e: React.MouseEvent) => e.preventDefault()}\n        >\n            {minesArray.map((e) => { return e })}\n            <div className=\"panel-container\">\n                <div className=\"panel-data-container\">\n                    <div>\n                        selected: {selectedMineCount}\n                    </div>\n                    <div>\n                        Total mines: {minesCount}\n                    </div>\n                </div>\n                <div className=\"result-container\">\n                    {gameOver ? <div>Game over</div> : <div>Game in progress</div>}\n                    {gameOver ? markStatus.length === mines.length && markStatus.every((value, index) => value === mines[index]) ? <div>You won</div> : <div>You lost</div> : null}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default ShowMines","\nexport function shuffle<T>(mines:Array<T>,start:number):void {\n    for (let i = 1; i < mines.length; i++) {\n        const randomIndex = Math.floor(Math.random() * (i + 1));\n        const tmp = mines[randomIndex];\n        mines[randomIndex] = mines[i];\n        mines[i] = tmp;\n    }\n}","export function calcNeighbourCount(width:number,height:number,mines:Array<number>):Array<number>{\n    const result = new Array(mines.length).fill(0);\n    for (let i = 0; i < result.length; i++) {\n        if (!mines[i]) {\n            continue;\n        }\n        const y = i % width;\n        const x = (i - y) / width;\n        for (let j = -1; j < 2; j++) {\n            const newX = x + j;\n            if (newX < 0 || newX === height) {\n                continue;\n            }\n            for (let k = -1; k < 2; k++) {\n                const newY = y + k;\n                if (newY < 0 || newY ===width) {\n                    continue;\n                }\n                result[newX * width + newY]++;\n            }\n        }\n    }\n    return result;\n}\n","import './index.css';\nimport ShowMines from './showMines'\n\ntype Props = {\n    height: number,\n    width: number,\n    minesCount: number\n}\n\nconst Board = (props: Props) => {\n    return (\n        <div className=\"board-container\">\n            <ShowMines data={props} />\n        </div>\n    )\n}\n\nexport default Board;","import './App.css';\nimport  Board from './components/board/index' \n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <div className=\"app-main\">\n        <Board height={8} width={8} minesCount={10}/>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}